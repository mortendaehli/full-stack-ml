/* tslint:disable */
/* eslint-disable */
/**
 * full-stack-ml
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Configuration } from './configuration';
import globalAxios, {
  AxiosPromise,
  AxiosInstance,
  AxiosRequestConfig,
} from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from './common';
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from './base';

/**
 *
 * @export
 * @interface Account
 */
export interface Account {
  /**
   *
   * @type {string}
   * @memberof Account
   */
  created_at: string;
  /**
   *
   * @type {string}
   * @memberof Account
   */
  current_subscription_ends?: string;
  /**
   *
   * @type {string}
   * @memberof Account
   */
  description?: string;
  /**
   *
   * @type {string}
   * @memberof Account
   */
  id: string;
  /**
   *
   * @type {boolean}
   * @memberof Account
   */
  is_active?: boolean;
  /**
   *
   * @type {string}
   * @memberof Account
   */
  name?: string;
  /**
   *
   * @type {string}
   * @memberof Account
   */
  plan_id?: string;
  /**
   *
   * @type {string}
   * @memberof Account
   */
  updated_at: string;
}
/**
 *
 * @export
 * @interface AccountCreate
 */
export interface AccountCreate {
  /**
   *
   * @type {string}
   * @memberof AccountCreate
   */
  current_subscription_ends?: string;
  /**
   *
   * @type {string}
   * @memberof AccountCreate
   */
  description?: string;
  /**
   *
   * @type {boolean}
   * @memberof AccountCreate
   */
  is_active?: boolean;
  /**
   *
   * @type {string}
   * @memberof AccountCreate
   */
  name?: string;
  /**
   *
   * @type {string}
   * @memberof AccountCreate
   */
  plan_id?: string;
}
/**
 *
 * @export
 * @interface AccountUpdate
 */
export interface AccountUpdate {
  /**
   *
   * @type {string}
   * @memberof AccountUpdate
   */
  current_subscription_ends?: string;
  /**
   *
   * @type {string}
   * @memberof AccountUpdate
   */
  description?: string;
  /**
   *
   * @type {boolean}
   * @memberof AccountUpdate
   */
  is_active?: boolean;
  /**
   *
   * @type {string}
   * @memberof AccountUpdate
   */
  name?: string;
  /**
   *
   * @type {string}
   * @memberof AccountUpdate
   */
  plan_id?: string;
}
/**
 *
 * @export
 * @interface HTTPValidationError
 */
export interface HTTPValidationError {
  /**
   *
   * @type {Array<ValidationError>}
   * @memberof HTTPValidationError
   */
  detail?: Array<ValidationError>;
}
/**
 *
 * @export
 * @interface Role
 */
export interface Role {
  /**
   *
   * @type {string}
   * @memberof Role
   */
  description?: string;
  /**
   *
   * @type {string}
   * @memberof Role
   */
  id: string;
  /**
   *
   * @type {string}
   * @memberof Role
   */
  name?: string;
}
/**
 *
 * @export
 * @interface Token
 */
export interface Token {
  /**
   *
   * @type {string}
   * @memberof Token
   */
  access_token: string;
  /**
   *
   * @type {string}
   * @memberof Token
   */
  token_type: string;
}
/**
 *
 * @export
 * @interface User
 */
export interface User {
  /**
   *
   * @type {string}
   * @memberof User
   */
  account_id?: string;
  /**
   *
   * @type {string}
   * @memberof User
   */
  created_at: string;
  /**
   *
   * @type {string}
   * @memberof User
   */
  email?: string;
  /**
   *
   * @type {string}
   * @memberof User
   */
  full_name?: string;
  /**
   *
   * @type {string}
   * @memberof User
   */
  id: string;
  /**
   *
   * @type {boolean}
   * @memberof User
   */
  is_active?: boolean;
  /**
   *
   * @type {string}
   * @memberof User
   */
  phone_number?: string;
  /**
   *
   * @type {string}
   * @memberof User
   */
  updated_at: string;
  /**
   *
   * @type {UserRole}
   * @memberof User
   */
  user_role?: UserRole;
}
/**
 *
 * @export
 * @interface UserCreate
 */
export interface UserCreate {
  /**
   *
   * @type {string}
   * @memberof UserCreate
   */
  account_id: string;
  /**
   *
   * @type {string}
   * @memberof UserCreate
   */
  email?: string;
  /**
   *
   * @type {string}
   * @memberof UserCreate
   */
  full_name?: string;
  /**
   *
   * @type {boolean}
   * @memberof UserCreate
   */
  is_active?: boolean;
  /**
   *
   * @type {string}
   * @memberof UserCreate
   */
  password: string;
  /**
   *
   * @type {string}
   * @memberof UserCreate
   */
  phone_number?: string;
}
/**
 *
 * @export
 * @interface UserRegister
 */
export interface UserRegister {
  /**
   *
   * @type {string}
   * @memberof UserRegister
   */
  email: string;
  /**
   *
   * @type {string}
   * @memberof UserRegister
   */
  full_name: string;
  /**
   *
   * @type {string}
   * @memberof UserRegister
   */
  password: string;
  /**
   *
   * @type {string}
   * @memberof UserRegister
   */
  phone_number: string;
}
/**
 *
 * @export
 * @interface UserRole
 */
export interface UserRole {
  /**
   *
   * @type {Role}
   * @memberof UserRole
   */
  role: Role;
  /**
   *
   * @type {string}
   * @memberof UserRole
   */
  role_id?: string;
  /**
   *
   * @type {string}
   * @memberof UserRole
   */
  user_id?: string;
}
/**
 *
 * @export
 * @interface UserRoleCreate
 */
export interface UserRoleCreate {
  /**
   *
   * @type {string}
   * @memberof UserRoleCreate
   */
  role_id: string;
  /**
   *
   * @type {string}
   * @memberof UserRoleCreate
   */
  user_id: string;
}
/**
 *
 * @export
 * @interface UserRoleUpdate
 */
export interface UserRoleUpdate {
  /**
   *
   * @type {string}
   * @memberof UserRoleUpdate
   */
  role_id: string;
}
/**
 *
 * @export
 * @interface UserUpdate
 */
export interface UserUpdate {
  /**
   *
   * @type {string}
   * @memberof UserUpdate
   */
  email: string;
  /**
   *
   * @type {string}
   * @memberof UserUpdate
   */
  full_name: string;
  /**
   *
   * @type {string}
   * @memberof UserUpdate
   */
  phone_number: string;
}
/**
 *
 * @export
 * @interface ValidationError
 */
export interface ValidationError {
  /**
   *
   * @type {Array<string>}
   * @memberof ValidationError
   */
  loc: Array<string>;
  /**
   *
   * @type {string}
   * @memberof ValidationError
   */
  msg: string;
  /**
   *
   * @type {string}
   * @memberof ValidationError
   */
  type: string;
}

/**
 * AccountsApi - axios parameter creator
 * @export
 */
export const AccountsApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     * Add account to user
     * @summary Add Account To User
     * @param {string} accountId
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addAccountToUserApiV1AccountsAccountIdUsersPost: async (
      accountId: string,
      userId: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'accountId' is not null or undefined
      assertParamExists(
        'addAccountToUserApiV1AccountsAccountIdUsersPost',
        'accountId',
        accountId,
      );
      // verify required parameter 'userId' is not null or undefined
      assertParamExists(
        'addAccountToUserApiV1AccountsAccountIdUsersPost',
        'userId',
        userId,
      );
      const localVarPath = `/api/v1/accounts/{account_id}/users`.replace(
        `{${'account_id'}}`,
        encodeURIComponent(String(accountId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2PasswordBearer required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        'OAuth2PasswordBearer',
        [],
        configuration,
      );

      if (userId !== undefined) {
        localVarQueryParameter['user_id'] = userId;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Create account for current user.
     * @summary Create Account For Current User
     * @param {AccountCreate} accountCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAccountForCurrentUserApiV1AccountsPost: async (
      accountCreate: AccountCreate,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'accountCreate' is not null or undefined
      assertParamExists(
        'createAccountForCurrentUserApiV1AccountsPost',
        'accountCreate',
        accountCreate,
      );
      const localVarPath = `/api/v1/accounts/`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2PasswordBearer required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        'OAuth2PasswordBearer',
        [],
        configuration,
      );

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        accountCreate,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Get current active user account
     * @summary Get Account Current User
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAccountCurrentUserApiV1AccountsMeGet: async (
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/accounts/me`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2PasswordBearer required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        'OAuth2PasswordBearer',
        [],
        configuration,
      );

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * List all account if Role == Role.ADMIN
     * @summary Get All Accounts
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllAccountsApiV1AccountsGet: async (
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/accounts/`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2PasswordBearer required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        'OAuth2PasswordBearer',
        ['ADMIN'],
        configuration,
      );

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Retrieve users for own account.
     * @summary Get Current User Accounts
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCurrentUserAccountsApiV1AccountsUsersMeGet: async (
      skip?: number,
      limit?: number,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/accounts/users/me`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2PasswordBearer required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        'OAuth2PasswordBearer',
        ['ADMIN'],
        configuration,
      );

      if (skip !== undefined) {
        localVarQueryParameter['skip'] = skip;
      }

      if (limit !== undefined) {
        localVarQueryParameter['limit'] = limit;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Retrieve users for an account.
     * @summary Get Users For Account
     * @param {string} accountId
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUsersForAccountApiV1AccountsAccountIdUsersGet: async (
      accountId: string,
      skip?: number,
      limit?: number,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'accountId' is not null or undefined
      assertParamExists(
        'getUsersForAccountApiV1AccountsAccountIdUsersGet',
        'accountId',
        accountId,
      );
      const localVarPath = `/api/v1/accounts/{account_id}/users`.replace(
        `{${'account_id'}}`,
        encodeURIComponent(String(accountId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2PasswordBearer required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        'OAuth2PasswordBearer',
        ['ADMIN'],
        configuration,
      );

      if (skip !== undefined) {
        localVarQueryParameter['skip'] = skip;
      }

      if (limit !== undefined) {
        localVarQueryParameter['limit'] = limit;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Update an account. Requires admin role
     * @summary Update Account
     * @param {string} accountId
     * @param {AccountUpdate} accountUpdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateAccountApiV1AccountsAccountIdPut: async (
      accountId: string,
      accountUpdate: AccountUpdate,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'accountId' is not null or undefined
      assertParamExists(
        'updateAccountApiV1AccountsAccountIdPut',
        'accountId',
        accountId,
      );
      // verify required parameter 'accountUpdate' is not null or undefined
      assertParamExists(
        'updateAccountApiV1AccountsAccountIdPut',
        'accountUpdate',
        accountUpdate,
      );
      const localVarPath = `/api/v1/accounts/{account_id}`.replace(
        `{${'account_id'}}`,
        encodeURIComponent(String(accountId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'PUT',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2PasswordBearer required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        'OAuth2PasswordBearer',
        ['ADMIN'],
        configuration,
      );

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        accountUpdate,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * AccountsApi - functional programming interface
 * @export
 */
export const AccountsApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = AccountsApiAxiosParamCreator(configuration);
  return {
    /**
     * Add account to user
     * @summary Add Account To User
     * @param {string} accountId
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async addAccountToUserApiV1AccountsAccountIdUsersPost(
      accountId: string,
      userId: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.addAccountToUserApiV1AccountsAccountIdUsersPost(
          accountId,
          userId,
          options,
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     * Create account for current user.
     * @summary Create Account For Current User
     * @param {AccountCreate} accountCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createAccountForCurrentUserApiV1AccountsPost(
      accountCreate: AccountCreate,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Account>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.createAccountForCurrentUserApiV1AccountsPost(
          accountCreate,
          options,
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     * Get current active user account
     * @summary Get Account Current User
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getAccountCurrentUserApiV1AccountsMeGet(
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Account>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getAccountCurrentUserApiV1AccountsMeGet(
          options,
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     * List all account if Role == Role.ADMIN
     * @summary Get All Accounts
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getAllAccountsApiV1AccountsGet(
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Account>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getAllAccountsApiV1AccountsGet(options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     * Retrieve users for own account.
     * @summary Get Current User Accounts
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getCurrentUserAccountsApiV1AccountsUsersMeGet(
      skip?: number,
      limit?: number,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Account>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getCurrentUserAccountsApiV1AccountsUsersMeGet(
          skip,
          limit,
          options,
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     * Retrieve users for an account.
     * @summary Get Users For Account
     * @param {string} accountId
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getUsersForAccountApiV1AccountsAccountIdUsersGet(
      accountId: string,
      skip?: number,
      limit?: number,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<User>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getUsersForAccountApiV1AccountsAccountIdUsersGet(
          accountId,
          skip,
          limit,
          options,
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     * Update an account. Requires admin role
     * @summary Update Account
     * @param {string} accountId
     * @param {AccountUpdate} accountUpdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateAccountApiV1AccountsAccountIdPut(
      accountId: string,
      accountUpdate: AccountUpdate,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Account>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.updateAccountApiV1AccountsAccountIdPut(
          accountId,
          accountUpdate,
          options,
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
  };
};

/**
 * AccountsApi - factory interface
 * @export
 */
export const AccountsApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = AccountsApiFp(configuration);
  return {
    /**
     * Add account to user
     * @summary Add Account To User
     * @param {string} accountId
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addAccountToUserApiV1AccountsAccountIdUsersPost(
      accountId: string,
      userId: string,
      options?: any,
    ): AxiosPromise<User> {
      return localVarFp
        .addAccountToUserApiV1AccountsAccountIdUsersPost(
          accountId,
          userId,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     * Create account for current user.
     * @summary Create Account For Current User
     * @param {AccountCreate} accountCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAccountForCurrentUserApiV1AccountsPost(
      accountCreate: AccountCreate,
      options?: any,
    ): AxiosPromise<Account> {
      return localVarFp
        .createAccountForCurrentUserApiV1AccountsPost(accountCreate, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Get current active user account
     * @summary Get Account Current User
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAccountCurrentUserApiV1AccountsMeGet(
      options?: any,
    ): AxiosPromise<Account> {
      return localVarFp
        .getAccountCurrentUserApiV1AccountsMeGet(options)
        .then((request) => request(axios, basePath));
    },
    /**
     * List all account if Role == Role.ADMIN
     * @summary Get All Accounts
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllAccountsApiV1AccountsGet(
      options?: any,
    ): AxiosPromise<Array<Account>> {
      return localVarFp
        .getAllAccountsApiV1AccountsGet(options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Retrieve users for own account.
     * @summary Get Current User Accounts
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCurrentUserAccountsApiV1AccountsUsersMeGet(
      skip?: number,
      limit?: number,
      options?: any,
    ): AxiosPromise<Array<Account>> {
      return localVarFp
        .getCurrentUserAccountsApiV1AccountsUsersMeGet(skip, limit, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Retrieve users for an account.
     * @summary Get Users For Account
     * @param {string} accountId
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUsersForAccountApiV1AccountsAccountIdUsersGet(
      accountId: string,
      skip?: number,
      limit?: number,
      options?: any,
    ): AxiosPromise<Array<User>> {
      return localVarFp
        .getUsersForAccountApiV1AccountsAccountIdUsersGet(
          accountId,
          skip,
          limit,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     * Update an account. Requires admin role
     * @summary Update Account
     * @param {string} accountId
     * @param {AccountUpdate} accountUpdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateAccountApiV1AccountsAccountIdPut(
      accountId: string,
      accountUpdate: AccountUpdate,
      options?: any,
    ): AxiosPromise<Account> {
      return localVarFp
        .updateAccountApiV1AccountsAccountIdPut(
          accountId,
          accountUpdate,
          options,
        )
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * AccountsApi - object-oriented interface
 * @export
 * @class AccountsApi
 * @extends {BaseAPI}
 */
export class AccountsApi extends BaseAPI {
  /**
   * Add account to user
   * @summary Add Account To User
   * @param {string} accountId
   * @param {string} userId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AccountsApi
   */
  public addAccountToUserApiV1AccountsAccountIdUsersPost(
    accountId: string,
    userId: string,
    options?: AxiosRequestConfig,
  ) {
    return AccountsApiFp(this.configuration)
      .addAccountToUserApiV1AccountsAccountIdUsersPost(
        accountId,
        userId,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Create account for current user.
   * @summary Create Account For Current User
   * @param {AccountCreate} accountCreate
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AccountsApi
   */
  public createAccountForCurrentUserApiV1AccountsPost(
    accountCreate: AccountCreate,
    options?: AxiosRequestConfig,
  ) {
    return AccountsApiFp(this.configuration)
      .createAccountForCurrentUserApiV1AccountsPost(accountCreate, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Get current active user account
   * @summary Get Account Current User
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AccountsApi
   */
  public getAccountCurrentUserApiV1AccountsMeGet(options?: AxiosRequestConfig) {
    return AccountsApiFp(this.configuration)
      .getAccountCurrentUserApiV1AccountsMeGet(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * List all account if Role == Role.ADMIN
   * @summary Get All Accounts
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AccountsApi
   */
  public getAllAccountsApiV1AccountsGet(options?: AxiosRequestConfig) {
    return AccountsApiFp(this.configuration)
      .getAllAccountsApiV1AccountsGet(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Retrieve users for own account.
   * @summary Get Current User Accounts
   * @param {number} [skip]
   * @param {number} [limit]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AccountsApi
   */
  public getCurrentUserAccountsApiV1AccountsUsersMeGet(
    skip?: number,
    limit?: number,
    options?: AxiosRequestConfig,
  ) {
    return AccountsApiFp(this.configuration)
      .getCurrentUserAccountsApiV1AccountsUsersMeGet(skip, limit, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Retrieve users for an account.
   * @summary Get Users For Account
   * @param {string} accountId
   * @param {number} [skip]
   * @param {number} [limit]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AccountsApi
   */
  public getUsersForAccountApiV1AccountsAccountIdUsersGet(
    accountId: string,
    skip?: number,
    limit?: number,
    options?: AxiosRequestConfig,
  ) {
    return AccountsApiFp(this.configuration)
      .getUsersForAccountApiV1AccountsAccountIdUsersGet(
        accountId,
        skip,
        limit,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Update an account. Requires admin role
   * @summary Update Account
   * @param {string} accountId
   * @param {AccountUpdate} accountUpdate
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AccountsApi
   */
  public updateAccountApiV1AccountsAccountIdPut(
    accountId: string,
    accountUpdate: AccountUpdate,
    options?: AxiosRequestConfig,
  ) {
    return AccountsApiFp(this.configuration)
      .updateAccountApiV1AccountsAccountIdPut(accountId, accountUpdate, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     * OAuth 2.0 Password Grant to fetch a Bearer token for the user.  Requires password and username.  Fixme: This should not be used for any production system!     Ref:       https://docs.microsoft.com/en-us/azure/active-directory/develop/v2-oauth2-auth-code-flow       https://oauth.net/2/grant-types/password/
     * @summary Oauth2 Password Grant To Get Bearer Token
     * @param {string} password
     * @param {string} username
     * @param {string} [clientId]
     * @param {string} [clientSecret]
     * @param {string} [grantType]
     * @param {string} [scope]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oauth2PasswordGrantToGetBearerTokenApiV1AuthTokenPost: async (
      password: string,
      username: string,
      clientId?: string,
      clientSecret?: string,
      grantType?: string,
      scope?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'password' is not null or undefined
      assertParamExists(
        'oauth2PasswordGrantToGetBearerTokenApiV1AuthTokenPost',
        'password',
        password,
      );
      // verify required parameter 'username' is not null or undefined
      assertParamExists(
        'oauth2PasswordGrantToGetBearerTokenApiV1AuthTokenPost',
        'username',
        username,
      );
      const localVarPath = `/api/v1/auth/token`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;
      const localVarFormParams = new URLSearchParams();

      if (clientId !== undefined) {
        localVarFormParams.set('client_id', clientId as any);
      }

      if (clientSecret !== undefined) {
        localVarFormParams.set('client_secret', clientSecret as any);
      }

      if (grantType !== undefined) {
        localVarFormParams.set('grant_type', grantType as any);
      }

      if (password !== undefined) {
        localVarFormParams.set('password', password as any);
      }

      if (scope !== undefined) {
        localVarFormParams.set('scope', scope as any);
      }

      if (username !== undefined) {
        localVarFormParams.set('username', username as any);
      }

      localVarHeaderParameter['Content-Type'] =
        'application/x-www-form-urlencoded';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = localVarFormParams.toString();

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration);
  return {
    /**
     * OAuth 2.0 Password Grant to fetch a Bearer token for the user.  Requires password and username.  Fixme: This should not be used for any production system!     Ref:       https://docs.microsoft.com/en-us/azure/active-directory/develop/v2-oauth2-auth-code-flow       https://oauth.net/2/grant-types/password/
     * @summary Oauth2 Password Grant To Get Bearer Token
     * @param {string} password
     * @param {string} username
     * @param {string} [clientId]
     * @param {string} [clientSecret]
     * @param {string} [grantType]
     * @param {string} [scope]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async oauth2PasswordGrantToGetBearerTokenApiV1AuthTokenPost(
      password: string,
      username: string,
      clientId?: string,
      clientSecret?: string,
      grantType?: string,
      scope?: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Token>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.oauth2PasswordGrantToGetBearerTokenApiV1AuthTokenPost(
          password,
          username,
          clientId,
          clientSecret,
          grantType,
          scope,
          options,
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
  };
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = AuthApiFp(configuration);
  return {
    /**
     * OAuth 2.0 Password Grant to fetch a Bearer token for the user.  Requires password and username.  Fixme: This should not be used for any production system!     Ref:       https://docs.microsoft.com/en-us/azure/active-directory/develop/v2-oauth2-auth-code-flow       https://oauth.net/2/grant-types/password/
     * @summary Oauth2 Password Grant To Get Bearer Token
     * @param {string} password
     * @param {string} username
     * @param {string} [clientId]
     * @param {string} [clientSecret]
     * @param {string} [grantType]
     * @param {string} [scope]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oauth2PasswordGrantToGetBearerTokenApiV1AuthTokenPost(
      password: string,
      username: string,
      clientId?: string,
      clientSecret?: string,
      grantType?: string,
      scope?: string,
      options?: any,
    ): AxiosPromise<Token> {
      return localVarFp
        .oauth2PasswordGrantToGetBearerTokenApiV1AuthTokenPost(
          password,
          username,
          clientId,
          clientSecret,
          grantType,
          scope,
          options,
        )
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
  /**
   * OAuth 2.0 Password Grant to fetch a Bearer token for the user.  Requires password and username.  Fixme: This should not be used for any production system!     Ref:       https://docs.microsoft.com/en-us/azure/active-directory/develop/v2-oauth2-auth-code-flow       https://oauth.net/2/grant-types/password/
   * @summary Oauth2 Password Grant To Get Bearer Token
   * @param {string} password
   * @param {string} username
   * @param {string} [clientId]
   * @param {string} [clientSecret]
   * @param {string} [grantType]
   * @param {string} [scope]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthApi
   */
  public oauth2PasswordGrantToGetBearerTokenApiV1AuthTokenPost(
    password: string,
    username: string,
    clientId?: string,
    clientSecret?: string,
    grantType?: string,
    scope?: string,
    options?: AxiosRequestConfig,
  ) {
    return AuthApiFp(this.configuration)
      .oauth2PasswordGrantToGetBearerTokenApiV1AuthTokenPost(
        password,
        username,
        clientId,
        clientSecret,
        grantType,
        scope,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     * Dummy task to test the Celery Queue.
     * @summary Example Task
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    exampleTaskApiV1TaskGet: async (
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/task`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Check API backend health.
     * @summary Health Check
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    healthCheckApiV1HealthGet: async (
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/health`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration);
  return {
    /**
     * Dummy task to test the Celery Queue.
     * @summary Example Task
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async exampleTaskApiV1TaskGet(
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.exampleTaskApiV1TaskGet(options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     * Check API backend health.
     * @summary Health Check
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async healthCheckApiV1HealthGet(
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.healthCheckApiV1HealthGet(options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
  };
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = DefaultApiFp(configuration);
  return {
    /**
     * Dummy task to test the Celery Queue.
     * @summary Example Task
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    exampleTaskApiV1TaskGet(options?: any): AxiosPromise<any> {
      return localVarFp
        .exampleTaskApiV1TaskGet(options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Check API backend health.
     * @summary Health Check
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    healthCheckApiV1HealthGet(options?: any): AxiosPromise<any> {
      return localVarFp
        .healthCheckApiV1HealthGet(options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
  /**
   * Dummy task to test the Celery Queue.
   * @summary Example Task
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public exampleTaskApiV1TaskGet(options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .exampleTaskApiV1TaskGet(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Check API backend health.
   * @summary Health Check
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public healthCheckApiV1HealthGet(options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .healthCheckApiV1HealthGet(options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * RolesApi - axios parameter creator
 * @export
 */
export const RolesApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     * Get all user roles
     * @summary Get All User Roles
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllUserRolesApiV1RolesGet: async (
      skip?: number,
      limit?: number,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/roles/`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (skip !== undefined) {
        localVarQueryParameter['skip'] = skip;
      }

      if (limit !== undefined) {
        localVarQueryParameter['limit'] = limit;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * RolesApi - functional programming interface
 * @export
 */
export const RolesApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = RolesApiAxiosParamCreator(configuration);
  return {
    /**
     * Get all user roles
     * @summary Get All User Roles
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getAllUserRolesApiV1RolesGet(
      skip?: number,
      limit?: number,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Role>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getAllUserRolesApiV1RolesGet(
          skip,
          limit,
          options,
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
  };
};

/**
 * RolesApi - factory interface
 * @export
 */
export const RolesApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = RolesApiFp(configuration);
  return {
    /**
     * Get all user roles
     * @summary Get All User Roles
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllUserRolesApiV1RolesGet(
      skip?: number,
      limit?: number,
      options?: any,
    ): AxiosPromise<Array<Role>> {
      return localVarFp
        .getAllUserRolesApiV1RolesGet(skip, limit, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * RolesApi - object-oriented interface
 * @export
 * @class RolesApi
 * @extends {BaseAPI}
 */
export class RolesApi extends BaseAPI {
  /**
   * Get all user roles
   * @summary Get All User Roles
   * @param {number} [skip]
   * @param {number} [limit]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RolesApi
   */
  public getAllUserRolesApiV1RolesGet(
    skip?: number,
    limit?: number,
    options?: AxiosRequestConfig,
  ) {
    return RolesApiFp(this.configuration)
      .getAllUserRolesApiV1RolesGet(skip, limit, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * UserRolesApi - axios parameter creator
 * @export
 */
export const UserRolesApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     * Assign a role to an existing user
     * @summary Assign User Role To Existing User
     * @param {UserRoleCreate} userRoleCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    assignUserRoleToExistingUserApiV1UserRolesPost: async (
      userRoleCreate: UserRoleCreate,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'userRoleCreate' is not null or undefined
      assertParamExists(
        'assignUserRoleToExistingUserApiV1UserRolesPost',
        'userRoleCreate',
        userRoleCreate,
      );
      const localVarPath = `/api/v1/user-roles/`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2PasswordBearer required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        'OAuth2PasswordBearer',
        [],
        configuration,
      );

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        userRoleCreate,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Update an existing user role.
     * @summary Update User Role
     * @param {string} userId
     * @param {UserRoleUpdate} userRoleUpdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUserRoleApiV1UserRolesUserIdPut: async (
      userId: string,
      userRoleUpdate: UserRoleUpdate,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'userId' is not null or undefined
      assertParamExists(
        'updateUserRoleApiV1UserRolesUserIdPut',
        'userId',
        userId,
      );
      // verify required parameter 'userRoleUpdate' is not null or undefined
      assertParamExists(
        'updateUserRoleApiV1UserRolesUserIdPut',
        'userRoleUpdate',
        userRoleUpdate,
      );
      const localVarPath = `/api/v1/user-roles/{user_id}`.replace(
        `{${'user_id'}}`,
        encodeURIComponent(String(userId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'PUT',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2PasswordBearer required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        'OAuth2PasswordBearer',
        ['ADMIN'],
        configuration,
      );

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        userRoleUpdate,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * UserRolesApi - functional programming interface
 * @export
 */
export const UserRolesApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator =
    UserRolesApiAxiosParamCreator(configuration);
  return {
    /**
     * Assign a role to an existing user
     * @summary Assign User Role To Existing User
     * @param {UserRoleCreate} userRoleCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async assignUserRoleToExistingUserApiV1UserRolesPost(
      userRoleCreate: UserRoleCreate,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserRole>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.assignUserRoleToExistingUserApiV1UserRolesPost(
          userRoleCreate,
          options,
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     * Update an existing user role.
     * @summary Update User Role
     * @param {string} userId
     * @param {UserRoleUpdate} userRoleUpdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateUserRoleApiV1UserRolesUserIdPut(
      userId: string,
      userRoleUpdate: UserRoleUpdate,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserRole>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.updateUserRoleApiV1UserRolesUserIdPut(
          userId,
          userRoleUpdate,
          options,
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
  };
};

/**
 * UserRolesApi - factory interface
 * @export
 */
export const UserRolesApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = UserRolesApiFp(configuration);
  return {
    /**
     * Assign a role to an existing user
     * @summary Assign User Role To Existing User
     * @param {UserRoleCreate} userRoleCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    assignUserRoleToExistingUserApiV1UserRolesPost(
      userRoleCreate: UserRoleCreate,
      options?: any,
    ): AxiosPromise<UserRole> {
      return localVarFp
        .assignUserRoleToExistingUserApiV1UserRolesPost(userRoleCreate, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Update an existing user role.
     * @summary Update User Role
     * @param {string} userId
     * @param {UserRoleUpdate} userRoleUpdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUserRoleApiV1UserRolesUserIdPut(
      userId: string,
      userRoleUpdate: UserRoleUpdate,
      options?: any,
    ): AxiosPromise<UserRole> {
      return localVarFp
        .updateUserRoleApiV1UserRolesUserIdPut(userId, userRoleUpdate, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * UserRolesApi - object-oriented interface
 * @export
 * @class UserRolesApi
 * @extends {BaseAPI}
 */
export class UserRolesApi extends BaseAPI {
  /**
   * Assign a role to an existing user
   * @summary Assign User Role To Existing User
   * @param {UserRoleCreate} userRoleCreate
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserRolesApi
   */
  public assignUserRoleToExistingUserApiV1UserRolesPost(
    userRoleCreate: UserRoleCreate,
    options?: AxiosRequestConfig,
  ) {
    return UserRolesApiFp(this.configuration)
      .assignUserRoleToExistingUserApiV1UserRolesPost(userRoleCreate, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Update an existing user role.
   * @summary Update User Role
   * @param {string} userId
   * @param {UserRoleUpdate} userRoleUpdate
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserRolesApi
   */
  public updateUserRoleApiV1UserRolesUserIdPut(
    userId: string,
    userRoleUpdate: UserRoleUpdate,
    options?: AxiosRequestConfig,
  ) {
    return UserRolesApiFp(this.configuration)
      .updateUserRoleApiV1UserRolesUserIdPut(userId, userRoleUpdate, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * UsersApi - axios parameter creator
 * @export
 */
export const UsersApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     * Create new user. Requires admin role.
     * @summary Create New User
     * @param {UserCreate} userCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createNewUserApiV1UsersPost: async (
      userCreate: UserCreate,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'userCreate' is not null or undefined
      assertParamExists(
        'createNewUserApiV1UsersPost',
        'userCreate',
        userCreate,
      );
      const localVarPath = `/api/v1/users/`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2PasswordBearer required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        'OAuth2PasswordBearer',
        ['ADMIN'],
        configuration,
      );

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        userCreate,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Get current user.
     * @summary Get Current User
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCurrentUserApiV1UsersMeGet: async (
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/users/me`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2PasswordBearer required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        'OAuth2PasswordBearer',
        [],
        configuration,
      );

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Get a user by id if Role == Role.ADMIN
     * @summary Get User By Id
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserByIdApiV1UsersUserIdGet: async (
      userId: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'userId' is not null or undefined
      assertParamExists('getUserByIdApiV1UsersUserIdGet', 'userId', userId);
      const localVarPath = `/api/v1/users/{user_id}`.replace(
        `{${'user_id'}}`,
        encodeURIComponent(String(userId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2PasswordBearer required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        'OAuth2PasswordBearer',
        ['ADMIN'],
        configuration,
      );

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Retrieve all user. Requires admin role.
     * @summary Get Users
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUsersApiV1UsersGet: async (
      skip?: number,
      limit?: number,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/users/`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2PasswordBearer required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        'OAuth2PasswordBearer',
        ['ADMIN'],
        configuration,
      );

      if (skip !== undefined) {
        localVarQueryParameter['skip'] = skip;
      }

      if (limit !== undefined) {
        localVarQueryParameter['limit'] = limit;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Create new user without the need to be logged in.  This is closed for now.
     * @summary Register New User
     * @param {UserRegister} userRegister
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    registerNewUserApiV1UsersOpenPost: async (
      userRegister: UserRegister,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'userRegister' is not null or undefined
      assertParamExists(
        'registerNewUserApiV1UsersOpenPost',
        'userRegister',
        userRegister,
      );
      const localVarPath = `/api/v1/users/open`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        userRegister,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Update current user
     * @summary Update Current User
     * @param {UserUpdate} userUpdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCurrentUserApiV1UsersMePut: async (
      userUpdate: UserUpdate,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'userUpdate' is not null or undefined
      assertParamExists(
        'updateCurrentUserApiV1UsersMePut',
        'userUpdate',
        userUpdate,
      );
      const localVarPath = `/api/v1/users/me`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'PUT',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2PasswordBearer required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        'OAuth2PasswordBearer',
        [],
        configuration,
      );

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        userUpdate,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Update a user given Role == Role.ADMIN
     * @summary Update User
     * @param {string} userId
     * @param {UserUpdate} userUpdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUserApiV1UsersUserIdPut: async (
      userId: string,
      userUpdate: UserUpdate,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'userId' is not null or undefined
      assertParamExists('updateUserApiV1UsersUserIdPut', 'userId', userId);
      // verify required parameter 'userUpdate' is not null or undefined
      assertParamExists(
        'updateUserApiV1UsersUserIdPut',
        'userUpdate',
        userUpdate,
      );
      const localVarPath = `/api/v1/users/{user_id}`.replace(
        `{${'user_id'}}`,
        encodeURIComponent(String(userId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'PUT',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2PasswordBearer required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        'OAuth2PasswordBearer',
        ['ADMIN'],
        configuration,
      );

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        userUpdate,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = UsersApiAxiosParamCreator(configuration);
  return {
    /**
     * Create new user. Requires admin role.
     * @summary Create New User
     * @param {UserCreate} userCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createNewUserApiV1UsersPost(
      userCreate: UserCreate,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.createNewUserApiV1UsersPost(
          userCreate,
          options,
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     * Get current user.
     * @summary Get Current User
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getCurrentUserApiV1UsersMeGet(
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getCurrentUserApiV1UsersMeGet(options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     * Get a user by id if Role == Role.ADMIN
     * @summary Get User By Id
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getUserByIdApiV1UsersUserIdGet(
      userId: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getUserByIdApiV1UsersUserIdGet(
          userId,
          options,
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     * Retrieve all user. Requires admin role.
     * @summary Get Users
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getUsersApiV1UsersGet(
      skip?: number,
      limit?: number,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<User>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getUsersApiV1UsersGet(
          skip,
          limit,
          options,
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     * Create new user without the need to be logged in.  This is closed for now.
     * @summary Register New User
     * @param {UserRegister} userRegister
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async registerNewUserApiV1UsersOpenPost(
      userRegister: UserRegister,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.registerNewUserApiV1UsersOpenPost(
          userRegister,
          options,
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     * Update current user
     * @summary Update Current User
     * @param {UserUpdate} userUpdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateCurrentUserApiV1UsersMePut(
      userUpdate: UserUpdate,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.updateCurrentUserApiV1UsersMePut(
          userUpdate,
          options,
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     * Update a user given Role == Role.ADMIN
     * @summary Update User
     * @param {string} userId
     * @param {UserUpdate} userUpdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateUserApiV1UsersUserIdPut(
      userId: string,
      userUpdate: UserUpdate,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.updateUserApiV1UsersUserIdPut(
          userId,
          userUpdate,
          options,
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
  };
};

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = UsersApiFp(configuration);
  return {
    /**
     * Create new user. Requires admin role.
     * @summary Create New User
     * @param {UserCreate} userCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createNewUserApiV1UsersPost(
      userCreate: UserCreate,
      options?: any,
    ): AxiosPromise<User> {
      return localVarFp
        .createNewUserApiV1UsersPost(userCreate, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Get current user.
     * @summary Get Current User
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCurrentUserApiV1UsersMeGet(options?: any): AxiosPromise<User> {
      return localVarFp
        .getCurrentUserApiV1UsersMeGet(options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Get a user by id if Role == Role.ADMIN
     * @summary Get User By Id
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserByIdApiV1UsersUserIdGet(
      userId: string,
      options?: any,
    ): AxiosPromise<User> {
      return localVarFp
        .getUserByIdApiV1UsersUserIdGet(userId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Retrieve all user. Requires admin role.
     * @summary Get Users
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUsersApiV1UsersGet(
      skip?: number,
      limit?: number,
      options?: any,
    ): AxiosPromise<Array<User>> {
      return localVarFp
        .getUsersApiV1UsersGet(skip, limit, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Create new user without the need to be logged in.  This is closed for now.
     * @summary Register New User
     * @param {UserRegister} userRegister
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    registerNewUserApiV1UsersOpenPost(
      userRegister: UserRegister,
      options?: any,
    ): AxiosPromise<User> {
      return localVarFp
        .registerNewUserApiV1UsersOpenPost(userRegister, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Update current user
     * @summary Update Current User
     * @param {UserUpdate} userUpdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCurrentUserApiV1UsersMePut(
      userUpdate: UserUpdate,
      options?: any,
    ): AxiosPromise<User> {
      return localVarFp
        .updateCurrentUserApiV1UsersMePut(userUpdate, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Update a user given Role == Role.ADMIN
     * @summary Update User
     * @param {string} userId
     * @param {UserUpdate} userUpdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUserApiV1UsersUserIdPut(
      userId: string,
      userUpdate: UserUpdate,
      options?: any,
    ): AxiosPromise<User> {
      return localVarFp
        .updateUserApiV1UsersUserIdPut(userId, userUpdate, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI {
  /**
   * Create new user. Requires admin role.
   * @summary Create New User
   * @param {UserCreate} userCreate
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersApi
   */
  public createNewUserApiV1UsersPost(
    userCreate: UserCreate,
    options?: AxiosRequestConfig,
  ) {
    return UsersApiFp(this.configuration)
      .createNewUserApiV1UsersPost(userCreate, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Get current user.
   * @summary Get Current User
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersApi
   */
  public getCurrentUserApiV1UsersMeGet(options?: AxiosRequestConfig) {
    return UsersApiFp(this.configuration)
      .getCurrentUserApiV1UsersMeGet(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Get a user by id if Role == Role.ADMIN
   * @summary Get User By Id
   * @param {string} userId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersApi
   */
  public getUserByIdApiV1UsersUserIdGet(
    userId: string,
    options?: AxiosRequestConfig,
  ) {
    return UsersApiFp(this.configuration)
      .getUserByIdApiV1UsersUserIdGet(userId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Retrieve all user. Requires admin role.
   * @summary Get Users
   * @param {number} [skip]
   * @param {number} [limit]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersApi
   */
  public getUsersApiV1UsersGet(
    skip?: number,
    limit?: number,
    options?: AxiosRequestConfig,
  ) {
    return UsersApiFp(this.configuration)
      .getUsersApiV1UsersGet(skip, limit, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Create new user without the need to be logged in.  This is closed for now.
   * @summary Register New User
   * @param {UserRegister} userRegister
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersApi
   */
  public registerNewUserApiV1UsersOpenPost(
    userRegister: UserRegister,
    options?: AxiosRequestConfig,
  ) {
    return UsersApiFp(this.configuration)
      .registerNewUserApiV1UsersOpenPost(userRegister, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Update current user
   * @summary Update Current User
   * @param {UserUpdate} userUpdate
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersApi
   */
  public updateCurrentUserApiV1UsersMePut(
    userUpdate: UserUpdate,
    options?: AxiosRequestConfig,
  ) {
    return UsersApiFp(this.configuration)
      .updateCurrentUserApiV1UsersMePut(userUpdate, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Update a user given Role == Role.ADMIN
   * @summary Update User
   * @param {string} userId
   * @param {UserUpdate} userUpdate
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersApi
   */
  public updateUserApiV1UsersUserIdPut(
    userId: string,
    userUpdate: UserUpdate,
    options?: AxiosRequestConfig,
  ) {
    return UsersApiFp(this.configuration)
      .updateUserApiV1UsersUserIdPut(userId, userUpdate, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
