/* tslint:disable */
/* eslint-disable */
/**
 * full-stack-ml
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Configuration } from './configuration';
import globalAxios, {
  AxiosPromise,
  AxiosInstance,
  AxiosRequestConfig,
} from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from './common';
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from './base';

/**
 *
 * @export
 * @interface BodyLoginApiTokenPost
 */
export interface BodyLoginApiTokenPost {
  /**
   *
   * @type {string}
   * @memberof BodyLoginApiTokenPost
   */
  client_id?: string;
  /**
   *
   * @type {string}
   * @memberof BodyLoginApiTokenPost
   */
  client_secret?: string;
  /**
   *
   * @type {string}
   * @memberof BodyLoginApiTokenPost
   */
  grant_type?: string;
  /**
   *
   * @type {string}
   * @memberof BodyLoginApiTokenPost
   */
  password: string;
  /**
   *
   * @type {string}
   * @memberof BodyLoginApiTokenPost
   */
  scope?: string;
  /**
   *
   * @type {string}
   * @memberof BodyLoginApiTokenPost
   */
  username: string;
}
/**
 *
 * @export
 * @interface BodySignupApiSignupPost
 */
export interface BodySignupApiSignupPost {
  /**
   *
   * @type {string}
   * @memberof BodySignupApiSignupPost
   */
  client_id?: string;
  /**
   *
   * @type {string}
   * @memberof BodySignupApiSignupPost
   */
  client_secret?: string;
  /**
   *
   * @type {string}
   * @memberof BodySignupApiSignupPost
   */
  grant_type?: string;
  /**
   *
   * @type {string}
   * @memberof BodySignupApiSignupPost
   */
  password: string;
  /**
   *
   * @type {string}
   * @memberof BodySignupApiSignupPost
   */
  scope?: string;
  /**
   *
   * @type {string}
   * @memberof BodySignupApiSignupPost
   */
  username: string;
}
/**
 *
 * @export
 * @interface HTTPValidationError
 */
export interface HTTPValidationError {
  /**
   *
   * @type {Array<ValidationError>}
   * @memberof HTTPValidationError
   */
  detail?: Array<ValidationError>;
}
/**
 *
 * @export
 * @interface User
 */
export interface User {
  /**
   *
   * @type {string}
   * @memberof User
   */
  email: string;
  /**
   *
   * @type {string}
   * @memberof User
   */
  first_name?: string;
  /**
   *
   * @type {number}
   * @memberof User
   */
  id: number;
  /**
   *
   * @type {boolean}
   * @memberof User
   */
  is_active?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof User
   */
  is_superuser?: boolean;
  /**
   *
   * @type {string}
   * @memberof User
   */
  last_name?: string;
}
/**
 *
 * @export
 * @interface UserCreate
 */
export interface UserCreate {
  /**
   *
   * @type {string}
   * @memberof UserCreate
   */
  email: string;
  /**
   *
   * @type {string}
   * @memberof UserCreate
   */
  first_name?: string;
  /**
   *
   * @type {boolean}
   * @memberof UserCreate
   */
  is_active?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof UserCreate
   */
  is_superuser?: boolean;
  /**
   *
   * @type {string}
   * @memberof UserCreate
   */
  last_name?: string;
  /**
   *
   * @type {string}
   * @memberof UserCreate
   */
  password: string;
}
/**
 *
 * @export
 * @interface UserEdit
 */
export interface UserEdit {
  /**
   *
   * @type {string}
   * @memberof UserEdit
   */
  email: string;
  /**
   *
   * @type {string}
   * @memberof UserEdit
   */
  first_name?: string;
  /**
   *
   * @type {boolean}
   * @memberof UserEdit
   */
  is_active?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof UserEdit
   */
  is_superuser?: boolean;
  /**
   *
   * @type {string}
   * @memberof UserEdit
   */
  last_name?: string;
  /**
   *
   * @type {string}
   * @memberof UserEdit
   */
  password?: string;
}
/**
 *
 * @export
 * @interface ValidationError
 */
export interface ValidationError {
  /**
   *
   * @type {Array<string>}
   * @memberof ValidationError
   */
  loc: Array<string>;
  /**
   *
   * @type {string}
   * @memberof ValidationError
   */
  msg: string;
  /**
   *
   * @type {string}
   * @memberof ValidationError
   */
  type: string;
}

/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     *
     * @summary Login
     * @param {string} password
     * @param {string} username
     * @param {string} [clientId]
     * @param {string} [clientSecret]
     * @param {string} [grantType]
     * @param {string} [scope]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    loginApiTokenPost: async (
      password: string,
      username: string,
      clientId?: string,
      clientSecret?: string,
      grantType?: string,
      scope?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'password' is not null or undefined
      assertParamExists('loginApiTokenPost', 'password', password);
      // verify required parameter 'username' is not null or undefined
      assertParamExists('loginApiTokenPost', 'username', username);
      const localVarPath = `/api/token`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;
      const localVarFormParams = new URLSearchParams();

      if (clientId !== undefined) {
        localVarFormParams.set('client_id', clientId as any);
      }

      if (clientSecret !== undefined) {
        localVarFormParams.set('client_secret', clientSecret as any);
      }

      if (grantType !== undefined) {
        localVarFormParams.set('grant_type', grantType as any);
      }

      if (password !== undefined) {
        localVarFormParams.set('password', password as any);
      }

      if (scope !== undefined) {
        localVarFormParams.set('scope', scope as any);
      }

      if (username !== undefined) {
        localVarFormParams.set('username', username as any);
      }

      localVarHeaderParameter['Content-Type'] =
        'application/x-www-form-urlencoded';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = localVarFormParams.toString();

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Signup
     * @param {string} password
     * @param {string} username
     * @param {string} [clientId]
     * @param {string} [clientSecret]
     * @param {string} [grantType]
     * @param {string} [scope]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    signupApiSignupPost: async (
      password: string,
      username: string,
      clientId?: string,
      clientSecret?: string,
      grantType?: string,
      scope?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'password' is not null or undefined
      assertParamExists('signupApiSignupPost', 'password', password);
      // verify required parameter 'username' is not null or undefined
      assertParamExists('signupApiSignupPost', 'username', username);
      const localVarPath = `/api/signup`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;
      const localVarFormParams = new URLSearchParams();

      if (clientId !== undefined) {
        localVarFormParams.set('client_id', clientId as any);
      }

      if (clientSecret !== undefined) {
        localVarFormParams.set('client_secret', clientSecret as any);
      }

      if (grantType !== undefined) {
        localVarFormParams.set('grant_type', grantType as any);
      }

      if (password !== undefined) {
        localVarFormParams.set('password', password as any);
      }

      if (scope !== undefined) {
        localVarFormParams.set('scope', scope as any);
      }

      if (username !== undefined) {
        localVarFormParams.set('username', username as any);
      }

      localVarHeaderParameter['Content-Type'] =
        'application/x-www-form-urlencoded';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = localVarFormParams.toString();

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Login
     * @param {string} password
     * @param {string} username
     * @param {string} [clientId]
     * @param {string} [clientSecret]
     * @param {string} [grantType]
     * @param {string} [scope]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async loginApiTokenPost(
      password: string,
      username: string,
      clientId?: string,
      clientSecret?: string,
      grantType?: string,
      scope?: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.loginApiTokenPost(
          password,
          username,
          clientId,
          clientSecret,
          grantType,
          scope,
          options,
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @summary Signup
     * @param {string} password
     * @param {string} username
     * @param {string} [clientId]
     * @param {string} [clientSecret]
     * @param {string} [grantType]
     * @param {string} [scope]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async signupApiSignupPost(
      password: string,
      username: string,
      clientId?: string,
      clientSecret?: string,
      grantType?: string,
      scope?: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.signupApiSignupPost(
          password,
          username,
          clientId,
          clientSecret,
          grantType,
          scope,
          options,
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
  };
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = AuthApiFp(configuration);
  return {
    /**
     *
     * @summary Login
     * @param {string} password
     * @param {string} username
     * @param {string} [clientId]
     * @param {string} [clientSecret]
     * @param {string} [grantType]
     * @param {string} [scope]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    loginApiTokenPost(
      password: string,
      username: string,
      clientId?: string,
      clientSecret?: string,
      grantType?: string,
      scope?: string,
      options?: any,
    ): AxiosPromise<any> {
      return localVarFp
        .loginApiTokenPost(
          password,
          username,
          clientId,
          clientSecret,
          grantType,
          scope,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Signup
     * @param {string} password
     * @param {string} username
     * @param {string} [clientId]
     * @param {string} [clientSecret]
     * @param {string} [grantType]
     * @param {string} [scope]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    signupApiSignupPost(
      password: string,
      username: string,
      clientId?: string,
      clientSecret?: string,
      grantType?: string,
      scope?: string,
      options?: any,
    ): AxiosPromise<any> {
      return localVarFp
        .signupApiSignupPost(
          password,
          username,
          clientId,
          clientSecret,
          grantType,
          scope,
          options,
        )
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
  /**
   *
   * @summary Login
   * @param {string} password
   * @param {string} username
   * @param {string} [clientId]
   * @param {string} [clientSecret]
   * @param {string} [grantType]
   * @param {string} [scope]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthApi
   */
  public loginApiTokenPost(
    password: string,
    username: string,
    clientId?: string,
    clientSecret?: string,
    grantType?: string,
    scope?: string,
    options?: AxiosRequestConfig,
  ) {
    return AuthApiFp(this.configuration)
      .loginApiTokenPost(
        password,
        username,
        clientId,
        clientSecret,
        grantType,
        scope,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Signup
   * @param {string} password
   * @param {string} username
   * @param {string} [clientId]
   * @param {string} [clientSecret]
   * @param {string} [grantType]
   * @param {string} [scope]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthApi
   */
  public signupApiSignupPost(
    password: string,
    username: string,
    clientId?: string,
    clientSecret?: string,
    grantType?: string,
    scope?: string,
    options?: AxiosRequestConfig,
  ) {
    return AuthApiFp(this.configuration)
      .signupApiSignupPost(
        password,
        username,
        clientId,
        clientSecret,
        grantType,
        scope,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     * Redirect base URL to docs.
     * @summary Docs Redirect
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    docsRedirectGet: async (
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Example Task
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    exampleTaskApiV1TaskGet: async (
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/task`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Health Check
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    healthCheckApiV1HealthGet: async (
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/health`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration);
  return {
    /**
     * Redirect base URL to docs.
     * @summary Docs Redirect
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async docsRedirectGet(
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.docsRedirectGet(
        options,
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @summary Example Task
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async exampleTaskApiV1TaskGet(
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.exampleTaskApiV1TaskGet(options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @summary Health Check
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async healthCheckApiV1HealthGet(
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.healthCheckApiV1HealthGet(options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
  };
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = DefaultApiFp(configuration);
  return {
    /**
     * Redirect base URL to docs.
     * @summary Docs Redirect
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    docsRedirectGet(options?: any): AxiosPromise<void> {
      return localVarFp
        .docsRedirectGet(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Example Task
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    exampleTaskApiV1TaskGet(options?: any): AxiosPromise<any> {
      return localVarFp
        .exampleTaskApiV1TaskGet(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Health Check
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    healthCheckApiV1HealthGet(options?: any): AxiosPromise<any> {
      return localVarFp
        .healthCheckApiV1HealthGet(options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
  /**
   * Redirect base URL to docs.
   * @summary Docs Redirect
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public docsRedirectGet(options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .docsRedirectGet(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Example Task
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public exampleTaskApiV1TaskGet(options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .exampleTaskApiV1TaskGet(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Health Check
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public healthCheckApiV1HealthGet(options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .healthCheckApiV1HealthGet(options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * UsersApi - axios parameter creator
 * @export
 */
export const UsersApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     * Create a new user
     * @summary User Create
     * @param {UserCreate} userCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userCreateApiV1UsersPost: async (
      userCreate: UserCreate,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'userCreate' is not null or undefined
      assertParamExists('userCreateApiV1UsersPost', 'userCreate', userCreate);
      const localVarPath = `/api/v1/users`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2PasswordBearer required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        'OAuth2PasswordBearer',
        [],
        configuration,
      );

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        userCreate,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Delete existing user
     * @summary User Delete
     * @param {number} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userDeleteApiV1UsersUserIdDelete: async (
      userId: number,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'userId' is not null or undefined
      assertParamExists('userDeleteApiV1UsersUserIdDelete', 'userId', userId);
      const localVarPath = `/api/v1/users/{user_id}`.replace(
        `{${'user_id'}}`,
        encodeURIComponent(String(userId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2PasswordBearer required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        'OAuth2PasswordBearer',
        [],
        configuration,
      );

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Get any user details
     * @summary User Details
     * @param {number} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userDetailsApiV1UsersUserIdGet: async (
      userId: number,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'userId' is not null or undefined
      assertParamExists('userDetailsApiV1UsersUserIdGet', 'userId', userId);
      const localVarPath = `/api/v1/users/{user_id}`.replace(
        `{${'user_id'}}`,
        encodeURIComponent(String(userId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2PasswordBearer required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        'OAuth2PasswordBearer',
        [],
        configuration,
      );

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Update existing user
     * @summary User Edit
     * @param {number} userId
     * @param {UserEdit} userEdit
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userEditApiV1UsersUserIdPut: async (
      userId: number,
      userEdit: UserEdit,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'userId' is not null or undefined
      assertParamExists('userEditApiV1UsersUserIdPut', 'userId', userId);
      // verify required parameter 'userEdit' is not null or undefined
      assertParamExists('userEditApiV1UsersUserIdPut', 'userEdit', userEdit);
      const localVarPath = `/api/v1/users/{user_id}`.replace(
        `{${'user_id'}}`,
        encodeURIComponent(String(userId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'PUT',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2PasswordBearer required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        'OAuth2PasswordBearer',
        [],
        configuration,
      );

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        userEdit,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Get own user
     * @summary User Me
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userMeApiV1UsersMeGet: async (
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/users/me`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2PasswordBearer required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        'OAuth2PasswordBearer',
        [],
        configuration,
      );

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Get all users
     * @summary Users List
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersListApiV1UsersGet: async (
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/users`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2PasswordBearer required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        'OAuth2PasswordBearer',
        [],
        configuration,
      );

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = UsersApiAxiosParamCreator(configuration);
  return {
    /**
     * Create a new user
     * @summary User Create
     * @param {UserCreate} userCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async userCreateApiV1UsersPost(
      userCreate: UserCreate,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.userCreateApiV1UsersPost(
          userCreate,
          options,
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     * Delete existing user
     * @summary User Delete
     * @param {number} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async userDeleteApiV1UsersUserIdDelete(
      userId: number,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.userDeleteApiV1UsersUserIdDelete(
          userId,
          options,
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     * Get any user details
     * @summary User Details
     * @param {number} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async userDetailsApiV1UsersUserIdGet(
      userId: number,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.userDetailsApiV1UsersUserIdGet(
          userId,
          options,
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     * Update existing user
     * @summary User Edit
     * @param {number} userId
     * @param {UserEdit} userEdit
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async userEditApiV1UsersUserIdPut(
      userId: number,
      userEdit: UserEdit,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.userEditApiV1UsersUserIdPut(
          userId,
          userEdit,
          options,
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     * Get own user
     * @summary User Me
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async userMeApiV1UsersMeGet(
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.userMeApiV1UsersMeGet(options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     * Get all users
     * @summary Users List
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async usersListApiV1UsersGet(
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<User>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.usersListApiV1UsersGet(options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
  };
};

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = UsersApiFp(configuration);
  return {
    /**
     * Create a new user
     * @summary User Create
     * @param {UserCreate} userCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userCreateApiV1UsersPost(
      userCreate: UserCreate,
      options?: any,
    ): AxiosPromise<User> {
      return localVarFp
        .userCreateApiV1UsersPost(userCreate, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Delete existing user
     * @summary User Delete
     * @param {number} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userDeleteApiV1UsersUserIdDelete(
      userId: number,
      options?: any,
    ): AxiosPromise<User> {
      return localVarFp
        .userDeleteApiV1UsersUserIdDelete(userId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Get any user details
     * @summary User Details
     * @param {number} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userDetailsApiV1UsersUserIdGet(
      userId: number,
      options?: any,
    ): AxiosPromise<User> {
      return localVarFp
        .userDetailsApiV1UsersUserIdGet(userId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Update existing user
     * @summary User Edit
     * @param {number} userId
     * @param {UserEdit} userEdit
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userEditApiV1UsersUserIdPut(
      userId: number,
      userEdit: UserEdit,
      options?: any,
    ): AxiosPromise<User> {
      return localVarFp
        .userEditApiV1UsersUserIdPut(userId, userEdit, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Get own user
     * @summary User Me
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userMeApiV1UsersMeGet(options?: any): AxiosPromise<User> {
      return localVarFp
        .userMeApiV1UsersMeGet(options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Get all users
     * @summary Users List
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersListApiV1UsersGet(options?: any): AxiosPromise<Array<User>> {
      return localVarFp
        .usersListApiV1UsersGet(options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI {
  /**
   * Create a new user
   * @summary User Create
   * @param {UserCreate} userCreate
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersApi
   */
  public userCreateApiV1UsersPost(
    userCreate: UserCreate,
    options?: AxiosRequestConfig,
  ) {
    return UsersApiFp(this.configuration)
      .userCreateApiV1UsersPost(userCreate, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Delete existing user
   * @summary User Delete
   * @param {number} userId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersApi
   */
  public userDeleteApiV1UsersUserIdDelete(
    userId: number,
    options?: AxiosRequestConfig,
  ) {
    return UsersApiFp(this.configuration)
      .userDeleteApiV1UsersUserIdDelete(userId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Get any user details
   * @summary User Details
   * @param {number} userId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersApi
   */
  public userDetailsApiV1UsersUserIdGet(
    userId: number,
    options?: AxiosRequestConfig,
  ) {
    return UsersApiFp(this.configuration)
      .userDetailsApiV1UsersUserIdGet(userId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Update existing user
   * @summary User Edit
   * @param {number} userId
   * @param {UserEdit} userEdit
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersApi
   */
  public userEditApiV1UsersUserIdPut(
    userId: number,
    userEdit: UserEdit,
    options?: AxiosRequestConfig,
  ) {
    return UsersApiFp(this.configuration)
      .userEditApiV1UsersUserIdPut(userId, userEdit, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Get own user
   * @summary User Me
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersApi
   */
  public userMeApiV1UsersMeGet(options?: AxiosRequestConfig) {
    return UsersApiFp(this.configuration)
      .userMeApiV1UsersMeGet(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Get all users
   * @summary Users List
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersApi
   */
  public usersListApiV1UsersGet(options?: AxiosRequestConfig) {
    return UsersApiFp(this.configuration)
      .usersListApiV1UsersGet(options)
      .then((request) => request(this.axios, this.basePath));
  }
}
