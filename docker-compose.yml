version: "3.8"
services:

  proxy:
    image: traefik:v2.2
    networks:
      - ${TRAEFIK_PUBLIC_NETWORK}
      - default
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    command:
      - traefik
      - --providers.docker
      - --providers.docker.constraints=Label(`traefik.constraint-label-stack`, `${TRAEFIK_TAG}`)
      - --providers.docker.exposedbydefault=false
      - --providers.docker.swarmmode
      - --accesslog
      - --log
      - --api
    deploy:
      placement:
        constraints:
          - node.role == manager
      labels:
        - traefik.enable=true
        - traefik.docker.network=${TRAEFIK_PUBLIC_NETWORK}
        - traefik.constraint-label=${TRAEFIK_PUBLIC_TAG}
        - traefik.http.middlewares.${PROJECT_NAME}-https-redirect.redirectscheme.scheme=https
        - traefik.http.middlewares.${PROJECT_NAME}-https-redirect.redirectscheme.permanent=true
        - traefik.http.routers.${PROJECT_NAME}-proxy-http.rule=Host(`${DOMAIN}`) || Host(`www.${DOMAIN}`)
        - traefik.http.routers.${PROJECT_NAME}-proxy-http.entrypoints=http
        - traefik.http.routers.${PROJECT_NAME}-proxy-https.rule=Host(`${DOMAIN}`) || Host(`www.${DOMAIN}`)
        - traefik.http.routers.${PROJECT_NAME}-proxy-https.entrypoints=https
        - traefik.http.routers.${PROJECT_NAME}-proxy-https.tls=true
        - traefik.http.routers.${PROJECT_NAME}-proxy-https.tls.certresolver=le
        - traefik.http.services.${PROJECT_NAME}-proxy.loadbalancer.server.port=80
        - traefik.http.middlewares.${PROJECT_NAME}-www-redirect.redirectregex.regex=^https?://(www.)?(${DOMAIN})/(.*)
        - traefik.http.middlewares.${PROJECT_NAME}-www-redirect.redirectregex.replacement=https://${DOMAIN}/$${3}
        - traefik.http.routers.${PROJECT_NAME}-proxy-https.middlewares=${PROJECT_NAME}-www-redirect
        - traefik.http.routers.${PROJECT_NAME}-proxy-http.middlewares=${PROJECT_NAME}-www-redirect,${PROJECT_NAME}-https-redirect

  db:
    image: postgres:14
    healthcheck:
      test: [ "CMD", "pg_isready", "-q", "-d", $POSTGRES_DB, "-U", $POSTGRES_USER ]
      timeout: 45s
      interval: 10s
      retries: 10
    restart: always
    env_file:
      - .env
    environment:
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - app-db-data:/var/lib/postgresql/data/pgdata
    deploy:
      placement:
        constraints:
          - node.labels.${PROJECT_NAME}.app-db-data == true

  pgadmin:
    image: dpage/pgadmin4
    networks:
      - ${TRAEFIK_PUBLIC_NETWORK}
      - default
    depends_on:
      - db
    env_file:
      - .env
    labels:
      - traefik.enable=true
      - traefik.docker.network=${TRAEFIK_PUBLIC_NETWORK}
      - traefik.constraint-label=${TRAEFIK_PUBLIC_TAG}
      - traefik.http.routers.${PROJECT_NAME}-pgadmin-http.rule=Host(`pgadmin.${DOMAIN}`)
      - traefik.http.routers.${PROJECT_NAME}-pgadmin-http.entrypoints=http
      - traefik.http.routers.${PROJECT_NAME}-pgadmin-http.middlewares=${PROJECT_NAME}-https-redirect
      - traefik.http.routers.${PROJECT_NAME}-pgadmin-https.rule=Host(`pgadmin.${DOMAIN}`)
      - traefik.http.routers.${PROJECT_NAME}-pgadmin-https.entrypoints=https
      - traefik.http.routers.${PROJECT_NAME}-pgadmin-https.tls=true
      - traefik.http.routers.${PROJECT_NAME}-pgadmin-https.tls.certresolver=le
      - traefik.http.services.${PROJECT_NAME}-pgadmin.loadbalancer.server.port=5050

  queue:
    image: rabbitmq:3

  worker:
    image: '${DOCKER_IMAGE_CELERY_WORKER}:${TAG:-latest}'
    build:
      context: .
      dockerfile: ./projects/backend/Dockerfile
      args:
        INSTALL_DEV: ${INSTALL_DEV:-false}
    env_file:
      - .env
    entrypoint: "./docker-entrypoint.sh"
    command: "celery"
    depends_on:
      - db
      - queue

  flower:
    image: mher/flower
    ports:
      - "5555:5555"
    depends_on:
      - queue
    networks:
      - ${TRAEFIK_PUBLIC_NETWORK}
      - default
    environment:
        - CELERY_BROKER_URL=pyamqp://guest@queue//
        - FLOWER_PORT=5555
    deploy:
      labels:
        - traefik.enable=true
        - traefik.docker.network=${TRAEFIK_PUBLIC_NETWORK}
        - traefik.constraint-label=${TRAEFIK_PUBLIC_TAG}
        - traefik.http.routers.${PROJECT_NAME}-flower-http.rule=Host(`flower.${DOMAIN}`)
        - traefik.http.routers.${PROJECT_NAME}-flower-http.entrypoints=http
        - traefik.http.routers.${PROJECT_NAME}-flower-http.middlewares=${PROJECT_NAME}-https-redirect
        - traefik.http.routers.${PROJECT_NAME}-flower-https.rule=Host(`flower.${DOMAIN}`)
        - traefik.http.routers.${PROJECT_NAME}-flower-https.entrypoints=https
        - traefik.http.routers.${PROJECT_NAME}-flower-https.tls=true
        - traefik.http.routers.${PROJECT_NAME}-flower-https.tls.certresolver=le
        - traefik.http.services.${PROJECT_NAME}-flower.loadbalancer.server.port=5555

  backend:
    image: '${DOCKER_IMAGE_BACKEND}:${TAG:-latest}'
    depends_on:
      - db
      - worker
    build:
      context: .
      dockerfile: ./projects/backend/Dockerfile
      args:
        INSTALL_DEV: ${INSTALL_DEV:-false}
    entrypoint: "./docker-entrypoint.sh"
    command: "api"
    env_file:
      - .env
    networks:
      - ${TRAEFIK_PUBLIC_NETWORK}
      - default
    deploy:
      labels:
        - traefik.enable=true
        - traefik.constraint-label-stack=${TRAEFIK_TAG}
        - traefik.http.routers.${PROJECT_NAME}-backend-http.rule=PathPrefix(`/api`) || PathPrefix(`/docs`) || PathPrefix(`/redoc`)
        - traefik.http.services.${PROJECT_NAME}-backend.loadbalancer.server.port=80

  frontend:
    image: '${DOCKER_IMAGE_FRONTEND}:${TAG:-latest}'
    build:
      context: .
      dockerfile: ./projects/frontend/Dockerfile
      args:
        NODE_ENV: ${NODE_ENV:-prod}
    deploy:
      labels:
        - traefik.enable=true
        - traefik.constraint-label-stack=${TRAEFIK_TAG}
        - traefik.http.routers.${PROJECT_NAME}-frontend-http.rule=PathPrefix(`/`)
        - traefik.http.services.${PROJECT_NAME}-frontend.loadbalancer.server.port=80

volumes:
  app-db-data:

networks:
  traefik-public:
    external: ${TRAEFIK_PUBLIC_NETWORK_IS_EXTERNAL:-true}
