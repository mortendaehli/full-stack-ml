version: "3.8"
services:

  proxy:
    image: "traefik:v2.5"
    container_name: "traefik"
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    command:
      - "--log.level=DEBUG"
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.myresolver.acme.tlschallenge=true"
      - "--certificatesresolvers.myresolver.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory"
      - "--certificatesresolvers.myresolver.acme.email=mortendaehli@gmail.com"
      - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"

    volumes:
      - "./projects/traefik/letsencrypt:/letsencrypt"
      - "/var/run/docker.sock:/var/run/docker.sock:ro"

  db:
    image: postgres:14
    healthcheck:
      test: [ "CMD", "pg_isready", "-q", "-d", $POSTGRES_DB, "-U", $POSTGRES_USER ]
      timeout: 45s
      interval: 10s
      retries: 10
    restart: always
    environment:
      - PGDATA=/var/lib/postgresql/data/pgdata
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_SERVER=${POSTGRES_SERVER}
    volumes:
      - app-db-data:/var/lib/postgresql/data/pgdata

  pgadmin:
    image: dpage/pgadmin4
    depends_on:
      - db
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_DEFAULT_EMAIL}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_DEFAULT_PASSWORD}
      - PGADMIN_LISTEN_PORT=${PGADMIN_LISTEN_PORT}
    ports:
      - "5050:5050"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.pgadmin.rule=PathPrefix(`/pgadmin`)"
      - "traefik.http.routers.pgadmin.entrypoints=websecure"
      - "traefik.http.routers.pgadmin.tls.certresolver=myresolver"

  queue:
    image: rabbitmq:3

  worker:
    image: '${DOCKER_IMAGE_CELERY_WORKER}:${TAG:-latest}'
    build:
      context: .
      dockerfile: ./projects/backend/Dockerfile
      args:
        INSTALL_DEV: ${INSTALL_DEV:-false}
    entrypoint: "./docker-entrypoint.sh"
    command: "celery"
    depends_on:
      - db
      - queue

  flower:
    image: mher/flower
    depends_on:
      - queue
    environment:
        - CELERY_BROKER_URL=${CELERY_BROKER_URL}
        - FLOWER_PORT=${FLOWER_PORT}
        - FLOWER_BASIC_AUTH=${FLOWER_BASIC_AUTH}
    ports:
      - "5555:5555"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.flower.rule=PathPrefix(`/flower`)"
      - "traefik.http.routers.flower.entrypoints=websecure"
      - "traefik.http.routers.flower.tls.certresolver=myresolver"

  backend:
    image: '${DOCKER_IMAGE_BACKEND}:${TAG:-latest}'
    depends_on:
      - db
      - worker
      - proxy
    build:
      context: .
      dockerfile: ./projects/backend/Dockerfile
      args:
        INSTALL_DEV: ${INSTALL_DEV:-false}
    entrypoint: "./docker-entrypoint.sh"
    command: "api"
    env_file:
      - .env
    ports:
      - "8888:8888"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.backend.rule=PathPrefix(`/api`) || PathPrefix(`/docs`) || PathPrefix(`/redoc`)"
      - "traefik.http.routers.backend.entrypoints=websecure"
      - "traefik.http.routers.backend.tls.certresolver=myresolver"

  frontend:
    image: '${DOCKER_IMAGE_FRONTEND}:${TAG:-latest}'
    build:
      context: .
      dockerfile: ./projects/frontend/Dockerfile
    environment:
      - NODE_ENV=${ENVIRONMENT}
      - DOMAIN=${DOMAIN}
      - API_URL="api.${DOMAIN}"
      - APP_NAME=${PROJECT_NAME}
    ports:
      - "8081:8080"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`localhost`)"
      - "traefik.http.routers.frontend.entrypoints=websecure"
      - "traefik.http.routers.frontend.tls.certresolver=myresolver"

volumes:
  app-db-data:
